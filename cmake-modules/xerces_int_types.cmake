#-----------------------------------------------------------------------------
# Determines what int types to use for various Xerces standard integer types.
#-----------------------------------------------------------------------------

INCLUDE(CheckTypeSize)

FOREACH(TYPE "short" "int" "long" "__int64" "int16_t" "uint16_t" "int32_t" "uint32_t" "int64_t" "uint64_t" "size_t" "ssize_t" "off_t")
  STRING(TOUPPER ${TYPE} UPPER_TYPE)
  CHECK_TYPE_SIZE(${TYPE} HAVE_${UPPER_TYPE})
ENDFOREACH()
CHECK_TYPE_SIZE("long long" HAVE_LONG_LONG)

set(SIZEOF_INT ${HAVE_INT})
set(SIZEOF_LONG ${HAVE_LONG})
set(SIZEOF_LONG_LONG ${HAVE_LONG_LONG})
set(SIZEOF_SHORT ${HAVE_SHORT})
set(SIZEOF___INT64 ${HAVE___INT64}) 

if(HAVE_INT16_T)
  set(XERCES_S16BIT_INT "int16_t")
elseif(HAVE_INT EQUAL 2)
  set(XERCES_S16BIT_INT "int")
elseif(HAVE_SHORT EQUAL 2)
  set(XERCES_S16BIT_INT "short")
else()
  message("Couldn't find a signed 16 bit int type")
endif()

if(HAVE_UINT16_T)
  set(XERCES_U16BIT_INT "uint16_t")
elseif(HAVE_INT EQUAL 2)
  set(XERCES_U16BIT_INT "unsigned int")
elseif(HAVE_SHORT EQUAL 2)
  set(XERCES_U16BIT_INT "unsigned short")
else()
  message("Couldn't find an unsigned 16 bit int type")
endif()

if(HAVE_INT32_T)
  set(XERCES_S32BIT_INT "int32_t")
elseif(HAVE_INT EQUAL 4)
  set(XERCES_S32BIT_INT "int")
elseif(HAVE_LONG EQUAL 4)
  set(XERCES_S32BIT_INT "long")
else()
  message("Couldn't find a signed 32 bit int type")
endif()

if(HAVE_UINT32_T)
  set(XERCES_U32BIT_INT "uint32_t")
elseif(HAVE_INT EQUAL 4)
  set(XERCES_U32BIT_INT "unsigned int")
elseif(HAVE_LONG EQUAL 4)
  set(XERCES_U32BIT_INT "unsigned long")
else()
  message("Couldn't find an unsigned 32 bit int type")
endif()
                                      
if(HAVE_INT64_T)
  set(XERCES_S64BIT_INT "int64_t")
elseif(HAVE_INT EQUAL 8)
  set(XERCES_S64BIT_INT "int")
elseif(HAVE_LONG EQUAL 8)
  set(XERCES_S64BIT_INT "long")
elseif(HAVE_LONG_LONG EQUAL 8)
  set(XERCES_S64BIT_INT "long long")
elseif(HAVE___INT64 EQUAL 8)
  set(XERCES_S64BIT_INT "__int64")
else()
  set(XERCES_S64BIT_INT ${XERCES_S32BIT_INT})
endif()

if(HAVE_UINT64_T)
  set(XERCES_U64BIT_INT "uint64_t")
elseif(HAVE_INT EQUAL 8)
  set(XERCES_U64BIT_INT "unsigned int")
elseif(HAVE_LONG EQUAL 8)
  set(XERCES_U64BIT_INT "unsigned long")
elseif(HAVE_LONG_LONG EQUAL 8)
  set(XERCES_U64BIT_INT "unsigned long long")
elseif(HAVE___INT64 EQUAL 8)
  set(XERCES_U64BIT_INT "unsigned __int64")
else()
  set(XERCES_U64BIT_INT ${XERCES_U32BIT_INT})
endif()

if(HAVE_SIZE_T)
  set(XERCES_SIZE_T "size_t")
else()
  set(XERCES_SIZE_T "long")
  set(size_t "unsigned int")
endif()

if(HAVE_SSIZE_T)
  set(XERCES_SSIZE_T "ssize_t")
else()
  set(XERCES_SSIZE_T "unsigned long")
endif()

if(NOT HAVE_OFF_T)
  set(off_t "long int")
endif()
